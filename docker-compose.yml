version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: kafka-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: kafka_microservices
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - kafka-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: kafka-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - kafka-network
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8086:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - kafka-network

  # Spring Boot Admin
  spring-boot-admin:
    build:
      context: .
      dockerfile: spring-boot-admin/Dockerfile
    container_name: spring-boot-admin
    depends_on:
      - mysql
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/admin_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: admin_password
    networks:
      - kafka-network

  # CBI Service
  cbi-service:
    build:
      context: .
      dockerfile: cbi-service/Dockerfile
    container_name: cbi-service
    depends_on:
      - mysql
      - kafka
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/cbi_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: cbi_user
      SPRING_DATASOURCE_PASSWORD: cbi_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - kafka-network

  # Schedule Service
  schedule-service:
    build:
      context: .
      dockerfile: schedule-service/Dockerfile
    container_name: schedule-service
    depends_on:
      - mysql
      - kafka
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/schedule_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: schedule_user
      SPRING_DATASOURCE_PASSWORD: schedule_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - kafka-network

  # Workflow Service
  workflow-service:
    build:
      context: .
      dockerfile: workflow-service/Dockerfile
    container_name: workflow-service
    depends_on:
      - mysql
      - kafka
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/workflow_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: workflow_user
      SPRING_DATASOURCE_PASSWORD: workflow_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - kafka-network

  # Gateway Service
  gateway-service:
    build:
      context: .
      dockerfile: gateway-service/Dockerfile
    container_name: gateway-service
    depends_on:
      - mysql
      - kafka
    ports:
      - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/gateway_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: gateway_user
      SPRING_DATASOURCE_PASSWORD: gateway_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - kafka-network

  # Kafka Manager
  kafka-manager:
    build:
      context: .
      dockerfile: kafka-manager/Dockerfile
    container_name: kafka-manager
    depends_on:
      - mysql
      - kafka
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/kafka_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: kafka_user
      SPRING_DATASOURCE_PASSWORD: kafka_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - kafka-network

  # UI Frontend
  ui-frontend:
    build:
      context: ./ui-frontend
      dockerfile: Dockerfile
    container_name: ui-frontend
    ports:
      - "3000:3000"
    networks:
      - kafka-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - kafka-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "9091:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: http://localhost:9091
    depends_on:
      - prometheus
    networks:
      - kafka-network
    restart: unless-stopped

volumes:
  mysql_data:
  prometheus_data:
  grafana_data:

networks:
  kafka-network:
    driver: bridge
